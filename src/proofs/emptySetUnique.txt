assume (\E x)((\A y)(\n (y\in x))) as emptyset;
instantiate eset from emptyset with empty;
create esetunique;
borrowStatement <\emptyset;
instantiate eset from <emptyset with empty;
const e;
assume (\A y)(\n(y \in e)) as eempty;
create arbitraryz;
const z;
move <\<;
assume (\A x)((\A y)( ((\A z)( ((z \in x) \imp (z \in y)) \and ((z \in y) \imp (z \in x)) )) \imp (x=y) )) as ext;
move esetunique\arbitraryz;
borrowStatement <\empty;
borrowStatement <\eempty;
apply <empty to z with znineset;
apply <eempty to z with znine;
impT znine implies \n(z \in eset) as contraeimeset;
contra contraeimeset as eimeset;
impT znineset implies \n(z \in e) as contraesetime;
contra contraesetime as esetime;
and eimeset esetime as eiffeset;
const e;
const eset;
move <;
borrowStatement <\ext;
apply <ext to e with eext;
apply eext to eset with eesetext;
squash arbitraryz\eiffeset as allzeiffeset;
modusP allzeiffeset eesetext as eiseset;
move <;
squash esetunique\eiseset as esetunique;